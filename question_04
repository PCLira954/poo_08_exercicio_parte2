class AplicacaoError extends Error {
    constructor(message: string = "Erro na aplicação.") {
        super(message)
        this.name = "AplicacaoError"
    }
}

class ValorInvalidoError extends AplicacaoError {
    constructor(message: string = "Valor inválido. O valor deve ser maior que zero.") {
        super(message)
        this.name = "ValorInvalidoError"
    }
}

class Conta {
    private _numero: string
    private _saldo: number

    constructor(numero: string, saldoInicial: number = 0) {
        this._numero = numero
        this._saldo = 0
        if (saldoInicial > 0) {
            this.depositar(saldoInicial)
        } else if (saldoInicial < 0) {
            throw new ValorInvalidoError("O saldo inicial não pode ser negativo.")
        }
    }

    get numero(): string {
        return this._numero
    }

    get saldo(): number {
        return this._saldo
    }

    depositar(valor: number): void {
        this.validarValor(valor)
        this._saldo += valor
        console.log(`Depósito de ${valor} realizado na conta ${this._numero}. Novo saldo: ${this._saldo}`)
    }

    sacar(valor: number): void {
        this.validarValor(valor)
        if (this._saldo < valor) {
            throw new SaldoInsuficienteError(`Saldo insuficiente na conta ${this._numero}.`)
        }
        this._saldo -= valor
        console.log(`Saque de ${valor} realizado na conta ${this._numero}. Novo saldo: ${this._saldo}`)
    }

    private validarValor(valor: number): void {
        if (valor <= 0) {
            throw new ValorInvalidoError()
        }
    }
}

try {
    
    const conta1 = new Conta("123", 1000)
    console.log(`Conta ${conta1.numero} criada com saldo inicial: ${conta1.saldo}`)

    
    const conta2 = new Conta("456", -100)
} catch (error) {
    if (error instanceof ValorInvalidoError) {
        console.error(error.message)
    } else {
        console.error("Erro desconhecido:", error)
    }
}
